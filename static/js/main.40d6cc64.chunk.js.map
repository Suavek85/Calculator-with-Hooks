{"version":3,"sources":["components/Counter.js","Helper.js","components/Buttons/Digits.js","constants.js","components/Buttons/Operators.js","components/Buttons/Buttons.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","className","firstInput","isOperator","operation","symbol","secondInput","helpers","settingInput","e","setInput","currentInput","newInputValue","currentTarget","dataset","foo","parseFloat","Math","round","length","addition","inputNumbersArray","resultAdding","this","additionHelper","roundingResult","reduce","prev","next","subtraction","resultDeducting","subtractionHelper","multiplication","resultMultiplying","multiplicationHelper","division","resultDividing","divisionHelper","isNaN","operationResult","toFixed","stringToNumbers","inputArr","map","el","Digits","items","name","order","keys","from","opacity","to","fadein","style","onClick","handleSettingInput","key","data-foo","data-order","ADDITION","SUBTRACTION","MULTIPLICATION","DIVISION","Operators","operationButtons","type","data-name","data-symbol","handleSettingOperation","handleAddingSecondInput","handleClearingCounter","Buttons","App","useState","setFirstInput","setSecondInput","setInputArr","setIsOperator","setOperation","fadeIn","useSpring","marginTop","useEffect","handleSettingOutput","div","selectedOperation","target","getAttribute","selectedSymbol","isFinite","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAeeA,MAZf,SAAiBC,GACf,OACE,yBAAKC,UAAU,oBACb,4BACE,8BAAOD,EAAME,YACZF,EAAMG,WAAa,8BAAOH,EAAMI,UAAUC,QAAiB,KAC5D,8BAAOL,EAAMM,gBCiFNC,EAxFC,CAEdC,aAAc,SAASC,EAAGC,EAAUC,GAClC,IAAMC,EAAgBH,EAAEI,cAAcC,QAAQC,IAEzB,IAAjBJ,GAAoD,IAA9BK,WAAWJ,GACnCF,EAASC,GAITK,WAAWC,KAAKC,MAAMP,MAAmBK,WAAWL,IAClC,MAAlBC,EAEAF,EAASC,GAGwC,MAA1CA,EAAaA,EAAaQ,OAAS,IAAgC,MAAlBP,EACxDF,EAASC,GAITD,EADwB,IAAjBC,GAAwC,MAAlBC,EACpBA,EAIAD,EAAeC,IAK5BQ,SAAU,SAASC,GAClB,IAAMC,EAAeC,KAAKC,eAAeH,GACzC,OAAOE,KAAKE,eAAeH,IAE5BE,eAAgB,SAASH,GACvB,OAAOA,EAAkBK,QAAO,SAACC,EAAMC,GACrC,OAAOD,EAAOC,MAIlBC,YAAa,SAASR,GACpB,IAAMS,EAAkBP,KAAKQ,kBAAkBV,GAC/C,OAAOE,KAAKE,eAAeK,IAE7BC,kBAAmB,SAASV,GAC1B,OAAOA,EAAkBK,QAAO,SAACC,EAAMC,GACrC,OAAOD,EAAOC,MAIlBI,eAAgB,SAASX,GACvB,IAAMY,EAAoBV,KAAKW,qBAAqBb,GACpD,OAAOE,KAAKE,eAAeQ,IAE7BC,qBAAsB,SAASb,GAC7B,OAAOA,EAAkBK,QAAO,SAACC,EAAMC,GACrC,OAAOD,EAAOC,MAIlBO,SAAU,SAASd,GACjB,IAAMe,EAAiBb,KAAKc,eAAehB,GAC3C,OAAIiB,MAAMF,GACD,QAEAb,KAAKE,eAAeW,IAG/BC,eAAgB,SAAShB,GACvB,OAAOA,EAAkBK,QAAO,SAACC,EAAMC,GACrC,OAAOD,EAAOC,MAIlBH,eAAgB,SAASc,GACvB,OAAKA,EAAkB,IAAM,EACpBA,EAAgBC,QAAQ,GAEzBD,GAGVE,gBAAiB,SAASC,GACxB,OAAOA,EAASC,KAAI,SAAAC,GAClB,OAAO5B,WAAW4B,Q,QC7BTC,MApDf,SAAgB7C,GAed,OACE,yBAAKC,UAAU,oBACb,kBAAC,QAAD,CAEE6C,MAlBQ,CACZ,CAAEC,KAAM,EAAGC,MAAO,GAClB,CAAED,KAAM,EAAGC,MAAO,GAClB,CAAED,KAAM,EAAGC,MAAO,GAClB,CAAED,KAAM,EAAGC,MAAO,IAClB,CAAED,KAAM,EAAGC,MAAO,GAClB,CAAED,KAAM,EAAGC,MAAO,GAClB,CAAED,KAAM,EAAGC,MAAO,GAClB,CAAED,KAAM,UAAWC,MAAO,IAC1B,CAAED,KAAM,EAAGC,MAAO,GAClB,CAAED,KAAM,EAAGC,MAAO,GAClB,CAAED,KAAM,EAAGC,MAAO,IAQdC,KAAM,SAAAL,GAAE,OAAIA,GACZM,KAAM,CAAEC,QAAS,GACjBC,GAAI,CAAED,QAAS,KAEd,SAAAP,GAAE,OAAI,SAAAS,GAAM,MACC,YAAZT,EAAGG,KACD,4BACEO,MAAOD,EACPE,QAASvD,EAAMwD,mBACfC,IAAI,KACJC,WAAS,IACTC,aAAYf,EAAGI,MACf/C,UAAU,aANZ,KAWA,4BACEsD,QAASvD,EAAMwD,mBACfC,IAAKb,EAAGI,MACRW,aAAYf,EAAGI,MACfU,WAAUd,EAAGG,KACbO,MAAOD,EACPpD,UAAU,aAET2C,EAAGG,YC/CLa,EAAmB,WACnBC,EAAuB,cACvBC,EAA0B,iBAC1BC,EAAkB,WC8BhBC,MA5Bf,SAAmBhE,GAEjB,IAAMiE,EAA+C,CACnD,CAAEC,KAAMN,EAAUvD,OAAQ,KAC1B,CAAE6D,KAAML,EAAaxD,OAAQ,KAC7B,CAAE6D,KAAMJ,EAAgBzD,OAAQ,QAChC,CAAE6D,KAAMH,EAAU1D,OAAQ,SAG5B,OACE,yBAAKJ,UAAU,qBACZgE,EAAiBtB,KAAI,SAAAC,GACpB,OACE,4BACEuB,YAAWvB,EAAGsB,KACdE,cAAaxB,EAAGvC,OAChBkD,QAASvD,EAAMqE,wBAEdzB,EAAGvC,WAIV,4BAAQkD,QAASvD,EAAMsE,yBAAvB,KACA,4BAAQf,QAASvD,EAAMuE,uBAAvB,OCXSC,MAbf,SAAiBxE,GACf,OACE,yBAAKC,UAAU,WACb,kBAAC,EAAD,CAAQuD,mBAAoBxD,EAAMwD,qBAClC,kBAAC,EAAD,CACEa,uBAAwBrE,EAAMqE,uBAC9BC,wBAAyBtE,EAAMsE,wBAC/BC,sBAAuBvE,EAAMuE,0BC0GtBE,MA7Gf,WAAe,MAEuBC,mBAAS,GAFhC,mBAENxE,EAFM,KAEMyE,EAFN,OAGyBD,mBAAS,IAHlC,mBAGNpE,EAHM,KAGOsE,EAHP,OAImBF,mBAAS,IAJ5B,mBAINhC,EAJM,KAIImC,EAJJ,OAKuBH,oBAAS,GALhC,mBAKNvE,EALM,KAKM2E,EALN,OAMqBJ,mBAAS,CAAE3B,KAAM,GAAI1C,OAAQ,KANlD,mBAMND,EANM,KAMK2E,EANL,KAOPC,EAASC,YAAU,CAAC/B,KAAM,CAAEC,QAAS,EAAG+B,UAAW,GAAK9B,GAAI,CAAED,QAAS,EAAG+B,UAAW,MAiF3F,OA7EAC,qBAAU,WACR,GAAwB,IAApBzC,EAASvB,OAAc,CACzB,IAAME,EAAoBd,EAAQkC,gBAAgBC,IA+CtD,SAA6BtC,EAAWiB,GACtC,OAAQjB,EAAU2C,MAChB,IAAK,WACH4B,EAAcpE,EAAQa,SAASC,IAC/B,MACF,IAAK,cACHsD,EAAcpE,EAAQsB,YAAYR,IAClC,MACF,IAAK,iBACHsD,EAAcpE,EAAQyB,eAAeX,IACrC,MACF,IAAK,WACHsD,EAAcpE,EAAQ4B,SAASd,IAC/B,MACF,QACEsD,EAAcpE,EAAQa,SAASC,KA7DjC+D,CAAoBhF,EAAWiB,GAC/ByD,GAAc,GACdF,EAAe,IACfC,EAAY,OAEb,CAACnC,EAAUtC,IAsEZ,kBAAC,IAASiF,IAAV,CAAcpF,UAAU,MAAMqD,MAAO0B,GACnC,kBAAC,EAAD,CACE9E,WAAYA,EACZI,YAAaA,EACbH,WAAYA,EACZC,UAAWA,IAEb,kBAAC,EAAD,CACEoD,mBA1EN,SAA4B/C,GACzBiC,EAASvB,OAENZ,EAAQC,aAAaC,EAAGmE,EAAgBtE,GADxCC,EAAQC,aAAaC,EAAGkE,EAAezE,IAyEvCmE,uBAnEN,SAAgC5D,GAC9B,IAAKN,EAAY,CACf,IAAMmF,EAAoB7E,EAAE8E,OAAOC,aAAa,aAC1CC,EAAiBhF,EAAE8E,OAAOC,aAAa,eAGxCE,SAASxF,GAIZ2E,EAAY,GAAD,mBAAKnC,GAAL,CAAexC,MAH1ByE,EAAc,GACdE,EAAY,CAAC,KAIfC,GAAc,GACdC,EAAa,CAAEhC,KAAMuC,EAAmBjF,OAAQoF,MAuD9CnB,wBAjDN,WACMhE,GACFuE,EAAY,GAAD,mBAAKnC,GAAL,CAAepC,MAgDxBiE,sBApBN,WACEI,EAAc,GACdC,EAAe,IACfC,EAAY,IACZC,GAAc,GACdC,EAAa,CAAEhC,KAAM,GAAI1C,OAAQ,UCnFjBsF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.40d6cc64.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.scss\";\r\n\r\nfunction Counter(props) {\r\n  return (\r\n    <div className=\"wrapper--counter\">\r\n      <h2>\r\n        <span>{props.firstInput}</span>\r\n        {props.isOperator ? <span>{props.operation.symbol}</span> : null}\r\n        <span>{props.secondInput}</span>\r\n      </h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Counter;\r\n","\r\n\r\nconst helpers = {\r\n  //ALLOW CORRECT NUMBER FORMAT\r\n  settingInput: function(e, setInput, currentInput) {\r\n    const newInputValue = e.currentTarget.dataset.foo;\r\n    //prevent two zeros from being displayed\r\n    if (currentInput === 0 && parseFloat(newInputValue) === 0) {\r\n      setInput(currentInput);\r\n    }\r\n    //prevent two decimal separators from being displayed when current input is a floating number\r\n    else if (\r\n      parseFloat(Math.round(currentInput)) !== parseFloat(currentInput) &&\r\n      newInputValue === \".\"\r\n    ) {\r\n      setInput(currentInput);\r\n    }\r\n    //prevent two decimal separators from being displayed when the last value is already a dec separator\r\n    else if (currentInput[currentInput.length - 1] === \".\" && newInputValue === \".\") {\r\n      setInput(currentInput);\r\n    }\r\n    //remove initial zero when new value is a number\r\n    else if (currentInput === 0 && newInputValue !== \".\") {\r\n      setInput(newInputValue);\r\n    }\r\n    //default\r\n    else {\r\n      setInput(currentInput + newInputValue);\r\n    }\r\n  },\r\n  \r\n  //ADDING\r\n  addition: function(inputNumbersArray) {\r\n   const resultAdding = this.additionHelper(inputNumbersArray);\r\n   return this.roundingResult(resultAdding);\r\n  },\r\n  additionHelper: function(inputNumbersArray) {\r\n    return inputNumbersArray.reduce((prev, next) => {\r\n      return prev + next;\r\n    });\r\n  },\r\n  //DEDUCTING\r\n  subtraction: function(inputNumbersArray) {\r\n    const resultDeducting = this.subtractionHelper(inputNumbersArray);\r\n    return this.roundingResult(resultDeducting);\r\n  },\r\n  subtractionHelper: function(inputNumbersArray) {\r\n    return inputNumbersArray.reduce((prev, next) => {\r\n      return prev - next;\r\n    });\r\n  },\r\n  //MULTIPLYING\r\n  multiplication: function(inputNumbersArray) {\r\n    const resultMultiplying = this.multiplicationHelper(inputNumbersArray);\r\n    return this.roundingResult(resultMultiplying);\r\n  },\r\n  multiplicationHelper: function(inputNumbersArray) {\r\n    return inputNumbersArray.reduce((prev, next) => {\r\n      return prev * next;\r\n    });\r\n  },\r\n  //DIVIDING\r\n  division: function(inputNumbersArray) {\r\n    const resultDividing = this.divisionHelper(inputNumbersArray);\r\n    if (isNaN(resultDividing)) {\r\n      return 'Error';\r\n    } else {\r\n      return this.roundingResult(resultDividing);\r\n    }\r\n  },\r\n  divisionHelper: function(inputNumbersArray) {\r\n    return inputNumbersArray.reduce((prev, next) => {\r\n      return prev / next;\r\n    });\r\n  },\r\n  //OTHER\r\n  roundingResult: function(operationResult) {\r\n    if ( operationResult % 1 !== 0) {\r\n      return operationResult.toFixed(2);\r\n    } else {\r\n     return operationResult;\r\n    }\r\n  },\r\n  stringToNumbers: function(inputArr) {\r\n    return inputArr.map(el => {\r\n      return parseFloat(el);\r\n    });\r\n  }\r\n};\r\n\r\nexport default helpers;\r\n","import React from \"react\";\r\nimport { Trail } from \"react-spring/renderprops\";\r\nimport \"../../App.scss\";\r\n\r\nfunction Digits(props) {\r\n  const items = [\r\n    { name: 9, order: 1 },\r\n    { name: 6, order: 4 },\r\n    { name: 3, order: 7 },\r\n    { name: 0, order: 10 },\r\n    { name: 8, order: 2 },\r\n    { name: 5, order: 5 },\r\n    { name: 2, order: 8 },\r\n    { name: \"decimal\", order: 11 },\r\n    { name: 7, order: 3 },\r\n    { name: 4, order: 6 },\r\n    { name: 1, order: 9 },\r\n  ]\r\n  \r\n  return (\r\n    <div className=\"wrapper--numbers\">\r\n      <Trail\r\n        //items={[9, 8, 7, 6, 5, 4, 3, 2, 1, 0, \"decimal\"]}\r\n        items={items}\r\n        keys={el => el}\r\n        from={{ opacity: 0 }}\r\n        to={{ opacity: 1 }}\r\n      >\r\n        {el => fadein =>\r\n          el.name === \"decimal\" ? (\r\n            <button\r\n              style={fadein}\r\n              onClick={props.handleSettingInput}\r\n              key=\"11\"\r\n              data-foo=\".\"\r\n              data-order={el.order}\r\n              className=\"btn-order\"\r\n            >\r\n              .\r\n            </button>\r\n          ) : (\r\n            <button\r\n              onClick={props.handleSettingInput}\r\n              key={el.order}\r\n              data-order={el.order}\r\n              data-foo={el.name}\r\n              style={fadein}\r\n              className=\"btn-order\"\r\n            >\r\n              {el.name}\r\n            </button>\r\n          )}\r\n      </Trail>\r\n    </div>\r\n  );\r\n}\r\nexport default Digits;\r\n","// @flow\r\n\r\nexport const ADDITION: string = \"addition\";\r\nexport const SUBTRACTION: string  = \"subtraction\";\r\nexport const MULTIPLICATION: string  = \"multiplication\";\r\nexport const DIVISION:string = \"division\";","// @flow\r\n\r\nimport React from \"react\";\r\nimport \"../../App.scss\";\r\nimport { ADDITION, SUBTRACTION, MULTIPLICATION, DIVISION } from \"../../constants\";\r\nimport type { OperationButtonType, OperatorsPropsType } from \"../../types\";\r\n\r\nfunction Operators(props: OperatorsPropsType) {\r\n\r\n  const operationButtons: Array<OperationButtonType> = [\r\n    { type: ADDITION, symbol: \"+\" },\r\n    { type: SUBTRACTION, symbol: \"-\" },\r\n    { type: MULTIPLICATION, symbol: \"×\" },\r\n    { type: DIVISION, symbol: \"÷\" }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"wrapper--operator\">\r\n      {operationButtons.map(el => {\r\n        return (\r\n          <button\r\n            data-name={el.type}\r\n            data-symbol={el.symbol}\r\n            onClick={props.handleSettingOperation}\r\n          >\r\n            {el.symbol}\r\n          </button>\r\n        );\r\n      })}\r\n      <button onClick={props.handleAddingSecondInput}>=</button>\r\n      <button onClick={props.handleClearingCounter}>c</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Operators;\r\n","import React from \"react\";\r\nimport Digits from \"./Digits\";\r\nimport Operators from \"./Operators\";\r\nimport \"../../App.scss\";\r\n//import selectors from \"../../styles.scss\";\r\n\r\nfunction Buttons(props) {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <Digits handleSettingInput={props.handleSettingInput} />\r\n      <Operators\r\n        handleSettingOperation={props.handleSettingOperation}\r\n        handleAddingSecondInput={props.handleAddingSecondInput}\r\n        handleClearingCounter={props.handleClearingCounter}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Buttons;\r\n","\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Counter from \"./components/Counter\";\r\nimport helpers from \"./Helper\";\r\nimport Buttons from \"./components/Buttons/Buttons\";\r\nimport \"./App.scss\";\r\n\r\n\r\n\r\nfunction App() {\r\n  //hooks\r\n  const [firstInput, setFirstInput] = useState(0);\r\n  const [secondInput, setSecondInput] = useState(\"\");\r\n  const [inputArr, setInputArr] = useState([]);\r\n  const [isOperator, setIsOperator] = useState(false);\r\n  const [operation, setOperation] = useState({ name: \"\", symbol: \"\" });\r\n  const fadeIn = useSpring({from: { opacity: 0, marginTop: 0 }, to: { opacity: 1, marginTop: 40 }});\r\n\r\n  //useEffect for displaying output / calculation result\r\n\r\n  useEffect(() => {\r\n    if (inputArr.length === 2) {\r\n      const inputNumbersArray = helpers.stringToNumbers(inputArr);\r\n      handleSettingOutput(operation, inputNumbersArray);\r\n      setIsOperator(false);\r\n      setSecondInput(\"\");\r\n      setInputArr([]);\r\n    }\r\n  }, [inputArr, operation]);\r\n\r\n  //setting first and second input values\r\n\r\n  function handleSettingInput(e) {\r\n    !inputArr.length\r\n      ? helpers.settingInput(e, setFirstInput, firstInput)\r\n      : helpers.settingInput(e, setSecondInput, secondInput);\r\n  }\r\n\r\n  //setting operation/operator type and adding firstInput\r\n\r\n  function handleSettingOperation(e) {\r\n    if (!isOperator) {\r\n      const selectedOperation = e.target.getAttribute(\"data-name\");\r\n      const selectedSymbol = e.target.getAttribute(\"data-symbol\");\r\n      //slower alt- e.currentTarget.dataset.name;\r\n\r\n      if (!isFinite(firstInput)) {\r\n        setFirstInput(0);\r\n        setInputArr([0]);\r\n      } else {\r\n        setInputArr([...inputArr, firstInput]);\r\n      }\r\n      setIsOperator(true);\r\n      setOperation({ name: selectedOperation, symbol: selectedSymbol });\r\n    }\r\n  }\r\n\r\n  //adding secondInput\r\n\r\n  function handleAddingSecondInput() {\r\n    if (secondInput) {\r\n      setInputArr([...inputArr, secondInput]);\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  // setting output\r\n\r\n  function handleSettingOutput(operation, inputNumbersArray) {\r\n    switch (operation.name) {\r\n      case \"addition\":\r\n        setFirstInput(helpers.addition(inputNumbersArray));\r\n        break;\r\n      case \"subtraction\":\r\n        setFirstInput(helpers.subtraction(inputNumbersArray));\r\n        break;\r\n      case \"multiplication\":\r\n        setFirstInput(helpers.multiplication(inputNumbersArray));\r\n        break;\r\n      case \"division\":\r\n        setFirstInput(helpers.division(inputNumbersArray));\r\n        break;\r\n      default:\r\n        setFirstInput(helpers.addition(inputNumbersArray));\r\n    }\r\n  }\r\n\r\n  // clearing counter\r\n  function handleClearingCounter() {\r\n    setFirstInput(0);\r\n    setSecondInput(\"\");\r\n    setInputArr([]);\r\n    setIsOperator(false);\r\n    setOperation({ name: \"\", symbol: \"\" });\r\n  }\r\n\r\n  return (\r\n    <animated.div className=\"App\" style={fadeIn}>\r\n      <Counter\r\n        firstInput={firstInput}\r\n        secondInput={secondInput}\r\n        isOperator={isOperator}\r\n        operation={operation}\r\n      />\r\n      <Buttons\r\n        handleSettingInput={handleSettingInput}\r\n        handleSettingOperation={handleSettingOperation}\r\n        handleAddingSecondInput={handleAddingSecondInput}\r\n        handleClearingCounter={handleClearingCounter}\r\n      />\r\n    </animated.div>\r\n  );\r\n}\r\n\r\n//TODO:  remove fn\r\n//change all to support multi operations\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}